// facebook-gpt-wedding-bot: Clean, robust, multi-user Messenger bot
require('dotenv').config();
const express = require('express');
const axios = require('axios');
const fs = require('fs');

const app = express();
app.use(express.json());

const PAGE_ACCESS_TOKEN = process.env.PAGE_ACCESS_TOKEN;
const VERIFY_TOKEN = process.env.VERIFY_TOKEN;
const PORT = process.env.PORT || 3000;

if (!PAGE_ACCESS_TOKEN || !VERIFY_TOKEN) {
  console.error('Missing PAGE_ACCESS_TOKEN or VERIFY_TOKEN');
  app.get('/', (req, res) => res.status(500).send('Missing env vars'));
  app.listen(PORT, () => console.log('Bot running (env error) on port', PORT));
  return;
}

// In-memory user state, persisted to file
const MEMORY_FILE = 'memory.json';
let memory = {};
if (fs.existsSync(MEMORY_FILE)) {
  try { memory = JSON.parse(fs.readFileSync(MEMORY_FILE, 'utf8')); } catch { memory = {}; }
}
function saveMemory() {
  fs.writeFileSync(MEMORY_FILE, JSON.stringify(memory, null, 2));
}

// Helper: send typing action
async function sendTyping(recipientId, action) {
  try {
    await axios.post(`https://graph.facebook.com/v18.0/me/messages?access_token=${PAGE_ACCESS_TOKEN}`,
      { recipient: { id: recipientId }, sender_action: action });
  } catch (err) { console.error('sendTyping error:', err?.response?.data || err.message); }
}

// Helper: send message (text or image)
async function sendMessage(recipientId, message, imageUrl = null) {
  const messages = Array.isArray(message) ? message : [message];
  for (const msg of messages) {
    try {
      await sendTyping(recipientId, 'typing_on');
      const payload = {
        messaging_type: 'RESPONSE',
        recipient: { id: recipientId },
        message: imageUrl
          ? { attachment: { type: 'image', payload: { url: imageUrl, is_reusable: true } }, metadata: 'from_bot' }
          : { text: msg, metadata: 'from_bot' },
      };
      await axios.post(`https://graph.facebook.com/v18.0/me/messages?access_token=${PAGE_ACCESS_TOKEN}`, payload);
    } catch (err) {
      console.error('sendMessage error:', err?.response?.data || err.message);
    } finally {
      await sendTyping(recipientId, 'typing_off');
    }
  }
}




// Main logic: handle message for each user
async function handleMessage(senderId, messageText) {
  // Load or init user state
  let user = memory[senderId] || {
    date: null, location: null, type: null, hasSentPackages: false, lastInteraction: Date.now()
  };
  // N·∫øu agent ƒë√£ tr·∫£ l·ªùi (block), bot kh√¥ng tr·∫£ l·ªùi n·ªØa
  if (user.agentBlockedUntil && Date.now() < user.agentBlockedUntil) {
    return;
  }
  user.lastInteraction = Date.now();
  const lower = messageText.toLowerCase();

  // --- Nh·∫≠n di·ªán info, h·ªèi ti·∫øp info, g·ª≠i ∆∞u ƒë√£i, ∆∞u ti√™n package ---
  // Regex nh·∫≠n di·ªán th√¥ng tin (khai b√°o 1 l·∫ßn ·ªü ƒë·∫ßu h√†m)
  if (!user.LOCATION_REGEX) user.LOCATION_REGEX = /(s√†i g√≤n|sg|hcm|long an|nh√† b√®|nha trang|v≈©ng t√†u|bi√™n h√≤a|c·∫ßn th∆°|qu·∫≠n \d+|q\d+|b√¨nh th·∫°nh|b√¨nh t√¢n|t√¢n b√¨nh|t√¢n ph√∫|ƒë·ª©c h√≤a|ƒë·ª©c hu·ªá|c√† mau|b·∫øn tre|vƒ©nh long|tr√† vinh|ƒë·ªìng th√°p|ba tri)/i;
  if (!user.TYPE_REGEX) user.TYPE_REGEX = /(s√°ng l·ªÖ|chi·ªÅu ti·ªác|ti·ªác tr∆∞a)/i;
  if (!user.date && /\d{1,2}[/\-]\d{1,2}([/\-]\d{2,4})?/.test(lower)) user.date = messageText;
  if (!user.location && user.LOCATION_REGEX.test(lower)) user.location = messageText;
  if (!user.type && user.TYPE_REGEX.test(lower)) user.type = messageText;
  memory[senderId] = user; saveMemory();

  // Ch·ªâ h·ªèi info c√≤n thi·∫øu b·∫±ng rule c·ª©ng, kh√¥ng d√πng GPT
  let missing = [];
  if (!user.date) missing.push('date');
  if (!user.location) missing.push('location');
  if (!user.type) missing.push('type');
  if (missing.length > 0) {
    if (!user.greeted) {
      await sendMessage(senderId, 'Hello D√¢u n√® ‚ù§Ô∏è Cody c·∫£m ∆°n v√¨ ƒë√£ nh·∫Øn tin ·∫°~');
      user.greeted = true;
    }
    if (!user.date) await sendMessage(senderId, 'Cho Cody xin ng√†y t·ªï ch·ª©c lu√¥n nha');
    if (!user.location) await sendMessage(senderId, 'V·ªõi ƒë·ªãa ƒëi·ªÉm t·ªï ch·ª©c lu√¥n nha (SG hay ·ªü t·ªânh n√®...))');
    if (!user.type) await sendMessage(senderId, 'L·ªÖ c∆∞·ªõi c·ªßa m√¨nh l√† s√°ng l·ªÖ, chi·ªÅu ti·ªác hay ti·ªác tr∆∞a ha?');
    memory[senderId] = user; saveMemory();
    return;
  }

  // ∆Øu ti√™n nh·∫≠n di·ªán y√™u c·∫ßu package c·ª• th·ªÉ (1 quay 1 ch·ª•p, 2 quay 2 ch·ª•p, ...)
  if (/1\s*quay.*1\s*ch·ª•p|1\s*ch·ª•p.*1\s*quay/i.test(lower)) {
    // Ch·ªâ g·ª≠i 1 l·∫ßn, kh√¥ng l·∫∑p l·∫°i n·∫øu ƒë√£ g·ª≠i package
    if (!user.hasSentPackages) {
      await sendMessage(senderId, 'D·∫°, g√≥i **1 m√°y quay + 1 m√°y ch·ª•p** (Package 3) b√™n em gi√° 9.500.000ƒë, ƒë√£ bao g·ªìm quay phim ph√≥ng s·ª± v√† ch·ª•p h√¨nh ph√≥ng s·ª± (h·ªó tr·ª£ ch·ª•p th√™m h√¨nh TT) tr·ªçn ng√†y c∆∞·ªõi nha!');
      await sendMessage(senderId, null, 'https://i.postimg.cc/hPMwbd8x/2.png');
      await sendMessage(senderId, 'Ngo√†i ra, b√™n em c√≤n 2 g√≥i cao h∆°n n·∫øu m√¨nh c·∫ßn nhi·ªÅu m√°y h∆°n, Cody g·ª≠i lu√¥n ƒë·ªÉ m√¨nh tham kh·∫£o nh√©:');
      await sendMessage(senderId, 'üéÅ **Package 1:** 2 m√°y quay + 2 m√°y ch·ª•p, gi√° 16.500.000ƒë');
      await sendMessage(senderId, null, 'https://i.postimg.cc/Gm4VhfkS/Peach-Modern-Wedding-Save-the-Date-Invitation-1.png');
      await sendMessage(senderId, 'üéÅ **Package 2:** 1 m√°y quay + 2 m√°y ch·ª•p, gi√° 12.500.000ƒë');
      await sendMessage(senderId, null, 'https://i.postimg.cc/prJNtnMQ/1.png');
      user.hasSentPackages = true;
      memory[senderId] = user; saveMemory();
    }
    return;
  }
  if (/2\s*quay.*2\s*ch·ª•p|2\s*ch·ª•p.*2\s*quay/i.test(lower)) {
    // Ch·ªâ g·ª≠i 1 l·∫ßn, kh√¥ng l·∫∑p l·∫°i n·∫øu ƒë√£ g·ª≠i package
    if (!user.hasSentPackages) {
      await sendMessage(senderId, 'D·∫°, g√≥i **2 m√°y quay + 2 m√°y ch·ª•p** (Package 1) b√™n em gi√° 16.500.000ƒë, full ekip quay ch·ª•p tr·ªçn ng√†y c∆∞·ªõi lu√¥n nha!');
      await sendMessage(senderId, null, 'https://i.postimg.cc/Gm4VhfkS/Peach-Modern-Wedding-Save-the-Date-Invitation-1.png');
      await sendMessage(senderId, 'Ngo√†i ra, b√™n em c√≤n 2 g√≥i nh·∫π h∆°n n·∫øu m√¨nh mu·ªën ti·∫øt ki·ªám chi ph√≠, Cody g·ª≠i lu√¥n ƒë·ªÉ m√¨nh tham kh·∫£o nh√©:');
      await sendMessage(senderId, 'üéÅ **Package 2:** 1 m√°y quay + 2 m√°y ch·ª•p, gi√° 12.500.000ƒë');
      await sendMessage(senderId, null, 'https://i.postimg.cc/prJNtnMQ/1.png');
      await sendMessage(senderId, 'üéÅ **Package 3:** 1 m√°y quay + 1 m√°y ch·ª•p, gi√° 9.500.000ƒë');
      await sendMessage(senderId, null, 'https://i.postimg.cc/hPMwbd8x/2.png');
      user.hasSentPackages = true;
      memory[senderId] = user; saveMemory();
    }
    return;
  }
  if (/1\s*quay.*2\s*ch·ª•p|2\s*ch·ª•p.*1\s*quay|1\s*ch·ª•p.*2\s*quay|2\s*quay.*1\s*ch·ª•p/i.test(lower)) {
    // Ch·ªâ g·ª≠i 1 l·∫ßn, kh√¥ng l·∫∑p l·∫°i n·∫øu ƒë√£ g·ª≠i package
    if (!user.hasSentPackages) {
      await sendMessage(senderId, 'D·∫°, g√≥i **1 m√°y quay + 2 m√°y ch·ª•p** (Package 2) b√™n em gi√° 12.500.000ƒë, ph√π h·ª£p cho l·ªÖ c∆∞·ªõi ƒë√¥ng kh√°ch ho·∫∑c mu·ªën nhi·ªÅu g√≥c ch·ª•p ƒë·∫πp nha!');
      await sendMessage(senderId, null, 'https://i.postimg.cc/prJNtnMQ/1.png');
      await sendMessage(senderId, 'Ngo√†i ra, b√™n em c√≤n 2 g√≥i kh√°c ƒë·ªÉ m√¨nh tham kh·∫£o th√™m:');
      await sendMessage(senderId, 'üéÅ **Package 1:** 2 m√°y quay + 2 m√°y ch·ª•p, gi√° 16.500.000ƒë');
      await sendMessage(senderId, null, 'https://i.postimg.cc/Gm4VhfkS/Peach-Modern-Wedding-Save-the-Date-Invitation-1.png');
      await sendMessage(senderId, 'üéÅ **Package 3:** 1 m√°y quay + 1 m√°y ch·ª•p, gi√° 9.500.000ƒë');
      await sendMessage(senderId, null, 'https://i.postimg.cc/hPMwbd8x/2.png');
      user.hasSentPackages = true;
      memory[senderId] = user; saveMemory();
    }
    return;
  }

  // ƒê·ªß info, g·ª≠i g√≥i ∆∞u ƒë√£i 1 l·∫ßn (ch·ªâ g·ª≠i khi ƒë√£ ƒë·ªß info)
  if (user.date && user.location && user.type && !user.hasSentPackages) {
    user.hasSentPackages = true;
    memory[senderId] = user; saveMemory();
    await sendMessage(senderId, 'D·∫°, d∆∞·ªõi ƒë√¢y l√† 3 g√≥i ∆∞u ƒë√£i c·ªßa th√°ng n√†y nhen, nhi·ªÅu ph·∫ßn qu√† t·∫∑ng k√®m v√† s·ªë l∆∞·ª£ng c√≥ h·∫°n n√® ‚ù§Ô∏è');
    // Package 1
    await sendMessage(senderId, 'üéÅ **Package 1:** 2 m√°y quay + 2 m√°y ch·ª•p, gi√° 16.500.000ƒë');
    await sendMessage(senderId, null, 'https://i.postimg.cc/Gm4VhfkS/Peach-Modern-Wedding-Save-the-Date-Invitation-1.png');
    // Package 2
    await sendMessage(senderId, 'üéÅ **Package 2:** 1 m√°y quay + 2 m√°y ch·ª•p, gi√° 12.500.000ƒë');
    await sendMessage(senderId, null, 'https://i.postimg.cc/prJNtnMQ/1.png');
    // Package 3
    await sendMessage(senderId, 'üéÅ **Package 3:** 1 m√°y quay + 1 m√°y ch·ª•p, gi√° 9.500.000ƒë');
    await sendMessage(senderId, null, 'https://i.postimg.cc/hPMwbd8x/2.png');
    // Sau 10s g·ª≠i th√™m d√≤ng ∆∞u ƒë√£i slot
    setTimeout(() => {
      sendMessage(senderId, 'M√¨nh xem th·ª≠ 3 g√≥i Cody ƒëang ∆∞u ƒë√£i nhen, hi·ªán t·∫°i c√≤n v√†i slot th√¥i ·∫°');
    }, 10000);
    // Kh√¥ng g·ªçi GPT n·ªØa sau khi ƒë√£ g·ª≠i 3 package, ch·ªâ g·ª≠i c·ª©ng
    return;
  }

  // N·∫øu ƒë√£ ƒë·ªß info, ƒë√£ g·ª≠i ∆∞u ƒë√£i, v√† kh√°ch n√≥i v·ªÅ package c·ª• th·ªÉ th√¨ nh·∫Øn ƒë·ª£i agent
  if (user.hasSentPackages) {
    // N·∫øu kh√°ch h·ªèi ƒë√∫ng package 1, 2, 3 ho·∫∑c s·ªë l∆∞·ª£ng m√°y tr√πng package
    if (/package\s*1|g√≥i\s*1|2\s*quay.*2\s*ch·ª•p|2\s*ch·ª•p.*2\s*quay/i.test(lower)) {
      await sendMessage(senderId, 'M√¨nh ƒë·ª£i Cody 1 x√≠u nh√©');
      return;
    }
    if (/package\s*2|g√≥i\s*2|1\s*quay.*2\s*ch·ª•p|2\s*ch·ª•p.*1\s*quay|1\s*ch·ª•p.*2\s*quay|2\s*quay.*1\s*ch·ª•p/i.test(lower)) {
      await sendMessage(senderId, 'M√¨nh ƒë·ª£i Cody 1 x√≠u nh√©');
      return;
    }
    if (/package\s*3|g√≥i\s*3|1\s*quay.*1\s*ch·ª•p|1\s*ch·ª•p.*1\s*quay/i.test(lower)) {
      await sendMessage(senderId, 'M√¨nh ƒë·ª£i Cody 1 x√≠u nh√©');
      return;
    }
    // Sau khi g·ª≠i package, v·∫´n cho ph√©p tr·∫£ l·ªùi c√°c rule c·ª©ng kh√°c
    // Kh√¥ng return ·ªü ƒë√¢y, ƒë·ªÉ c√°c rule c·ª©ng ph√≠a d∆∞·ªõi v·∫´n ho·∫°t ƒë·ªông
  }

  // --- K·∫øt th√∫c block ∆∞u ƒë√£i ---

  // 1. Sameday Edit l√† g√¨
  if (/sameday edit l√† g√¨|sameday edit la gi|sde l√† g√¨|sde la gi|sameday edit l√† g√¨ v·∫≠y|sameday edit l√† g√¨ ·∫°|sameday edit l√† g√¨ v·∫≠y ·∫°|sameday edit l√† g√¨ a|sameday edit l√† g√¨ v·∫≠y a/i.test(lower)) {
    await sendMessage(senderId, 'Sameday Edit l√† 1 video ng·∫Øn 3-4p c·ªßa bu·ªïi s√°ng gia ti√™n ƒë·ªÉ chi·∫øu v√†o ti·ªác t·ªëi nhen');
    return;
  }

  // 2. ƒêi t·ªânh kh√¥ng ho·∫∑c nh√† em ·ªü t·ªânh (ch∆∞a r√µ t·ªânh)
  if (/(b√™n anh c√≥ nh·∫≠n ƒëi t·ªânh|nh√† em ·ªü t·ªânh|em ·ªü t·ªânh|ƒëi t·ªânh kh√¥ng)/i.test(lower) && !/(s√†i g√≤n|sg|hcm|long an|nh√† b√®|nha trang|v≈©ng t√†u|bi√™n h√≤a|c·∫ßn th∆°|qu·∫≠n \d+|q\d+|b√¨nh th·∫°nh|b√¨nh t√¢n|t√¢n b√¨nh|t√¢n ph√∫|ƒë·ª©c h√≤a|ƒë·ª©c hu·ªá|c√† mau|b·∫øn tre|vƒ©nh long|tr√† vinh|ƒë·ªìng th√°p|ba tri)/i.test(lower)) {
    await sendMessage(senderId, 'Em ·ªü ƒë√¢u em ha?');
    return;
  }

  // 4. ƒê·∫∑t trong th√°ng n√†y m·ªõi c√≥ ∆∞u ƒë√£i ha anh?
  if (/ƒë·∫∑t trong th√°ng.*(m·ªõi c√≥|m·ªõi ƒë∆∞·ª£c).*∆∞u ƒë√£i|∆∞u ƒë√£i.*trong th√°ng/i.test(lower)) {
    let xungHo = 'D√¢u';
    if (/anh\b/.test(lower)) xungHo = 'anh';
    if (/ch·ªã\b/.test(lower)) xungHo = 'ch·ªã';
    await sendMessage(senderId, `ƒê√∫ng r·ªìi n√®, m√¨nh ƒë·∫∑t s·ªõm ƒë·ªÉ gi·ªØ ng√†y, block team v√† block ∆∞u ƒë√£i lu√¥n √°`);
    return;
  }

  // 5. Ph√≠ ƒëi l·∫°i/di chuy·ªÉn
  if (/(ph√≠ ƒëi l·∫°i|ph√≠ di chuy·ªÉn|ph√≠ xe|ph√≠ kh√°ch s·∫°n|ph√≠ ph√°t sinh|ph√°t sinh ph√≠ ƒëi l·∫°i|ph√°t sinh ph√≠ di chuy·ªÉn|ph√°t sinh ph√≠ xe|ph√°t sinh ph√≠ kh√°ch s·∫°n)/i.test(lower)) {
    if (user.location && /(s√†i g√≤n|sg|hcm)/i.test(user.location)) {
      await sendMessage(senderId, 'N·∫øu ·ªü SG th√¨ kh√¥ng c√≥ em n√®');
    } else {
      await sendMessage(senderId, 'M√¨nh ph√°t sinh th√™m ph√≠ ƒëi l·∫°i xe kh√°ch v√† kh√°ch s·∫°n cho team n√®, ƒë∆∞·ª£c t·∫∑ng ph·∫ßn chi ph√≠ ph√°t sinh ƒëi t·ªânh');
    }
    return;
  }

  // 6. L·ªÖ nh√† th·ªù/h√¥n ph·ªëi trong ng√†y c∆∞·ªõi
  if (/(l·ªÖ nh√† th·ªù|h√¥n ph·ªëi).*ph√°t sinh.*kh√¥ng|c√≥ ph√°t sinh.*l·ªÖ nh√† th·ªù|c√≥ ph√°t sinh.*h√¥n ph·ªëi/i.test(lower) && /trong ng√†y|trong ng√†y c∆∞·ªõi|c√πng ng√†y/i.test(lower)) {
    await sendMessage(senderId, 'Kh√¥ng ph√°t sinh n·∫øu t·ªï ch·ª©c trong ng√†y c∆∞·ªõi nhen');
    return;
  }

  // 7. L·ªÖ nh√† th·ªù t√°ch ng√†y
  if (/(l·ªÖ nh√† th·ªù|h√¥n ph·ªëi).*t√°ch ng√†y|ng√†y kh√°c|kh√°c ng√†y/i.test(lower)) {
    await sendMessage(senderId, 'Em cho anh xin l·ªãch tr√¨nh chi ti·∫øt nh√©');
    user.waitingForSchedule = true;
    memory[senderId] = user; saveMemory();
    return;
  }
  if (user.waitingForSchedule) {
    await sendMessage(senderId, 'Em ƒë·ª£i anh x√≠u nhen');
    user.agentBlockedUntil = Date.now() + 30 * 60 * 1000;
    user.waitingForSchedule = false;
    memory[senderId] = user; saveMemory();
    return;
  }

  // 8. ƒê·ªÉ em b√†n l·∫°i v·ªõi ch·ªìng/em h·ªèi √Ω th√™m gia ƒë√¨nh
  if (/ƒë·ªÉ em b√†n l·∫°i v·ªõi ch·ªìng|em h·ªèi √Ω.*gia ƒë√¨nh|em h·ªèi √Ω th√™m gia ƒë√¨nh/i.test(lower)) {
    await sendMessage(senderId, 'Okiee em n√®, c√≥ g√¨ b√°o Cody s·ªõm nhen ƒë·ªÉ block ng√†y v√† ∆∞u ƒë√£i cho em √°, do ∆∞u ƒë√£i s·∫Øp h·∫øt r√πi');
    return;
  }

  // 9. Cho em book ho·∫∑c em mu·ªën book g√≥i package 1/2/3
  if (/cho em book|em mu·ªën book|em mu·ªën book g√≥i|em mu·ªën book package|em mu·ªën ƒë·∫∑t g√≥i|em mu·ªën ƒë·∫∑t package|em mu·ªën book g√≥i package/i.test(lower)) {
    await sendMessage(senderId, 'Em ƒë·ª£i x√≠u anh check cho em nhen');
    user.agentBlockedUntil = Date.now() + 30 * 60 * 1000;
    memory[senderId] = user; saveMemory();
    return;
  }

  // 10. Xin gi√° quay/ch·ª•p 1 bu·ªïi
  if (/gi√°.*1 bu·ªïi|gi√° quay 1 bu·ªïi|gi√° ch·ª•p 1 bu·ªïi|gi√° 1 bu·ªïi ch·ª•p|gi√° 1 bu·ªïi quay|gi√° 1 bu·ªïi|gi√° quay ch·ª•p 1 bu·ªïi|gi√° 1 bu·ªïi ch·ª•p h√¨nh quay phim|gi√° 1 bu·ªïi quay phim ch·ª•p h√¨nh/i.test(lower)) {
    await sendMessage(senderId, 'M√¨nh c·∫ßn quay ch·ª•p l·ªÖ hay ti·ªác n√®?');
    if (!user.date) await sendMessage(senderId, 'Cho Cody xin ng√†y t·ªï ch·ª©c lu√¥n nha');
    if (!user.location) await sendMessage(senderId, 'Cho Cody xin ƒë·ªãa ƒëi·ªÉm t·ªï ch·ª©c lu√¥n nha');
    user.agentBlockedUntil = Date.now() + 30 * 60 * 1000;
    memory[senderId] = user; saveMemory();
    return;
  }

  // N·∫øu kh√¥ng kh·ªõp rule c·ª©ng n√†o th√¨ tr·∫£ l·ªùi m·∫∑c ƒë·ªãnh
  await sendMessage(senderId, 'M√¨nh ƒë·ª£i Cody 1 x√≠u nhen.');
  memory[senderId] = user; saveMemory();
  return;
}

// Facebook webhook: nh·∫≠n tin nh·∫Øn t·ª´ nhi·ªÅu kh√°ch
app.post('/webhook', async (req, res) => {
  const body = req.body;
  if (body.object === 'page') {
    await Promise.all(body.entry.map(async (entry) => {
      await Promise.all(entry.messaging.map(async (event) => {
        const senderId = event.sender.id;
        // Ch·ªâ b·ªè qua n·∫øu l√† tin nh·∫Øn echo t·ª´ admin th·∫≠t (c√≥ app_id)
        const isFromBot = event.message?.metadata === 'from_bot';
        const isEcho = event.message?.is_echo;
        const isAdminEcho = isEcho && !isFromBot && event.message?.app_id;
        // N·∫øu l√† agent (kh√¥ng ph·∫£i bot) nh·∫Øn th√¨ block bot 30 ph√∫t
        if (isEcho && !isFromBot && !isAdminEcho) {
          // Block bot 30 ph√∫t kh√¥ng tr·∫£ l·ªùi kh√°ch n√†y
          let user = memory[senderId] || {};
          const now = Date.now();
          const THIRTY_MINUTES = 30 * 60 * 1000;
          user.agentBlockedUntil = now + THIRTY_MINUTES;
          memory[senderId] = user; saveMemory();
          return;
        }
        if (isAdminEcho) return;
        if (event.message?.attachments && !isFromBot) {
          await sendMessage(senderId, 'Cody ƒë√£ nh·∫≠n ƒë∆∞·ª£c h√¨nh nha~');
          return;
        }
        // Kh√¥ng ch·∫∑n theo recentReplies, lu√¥n tr·∫£ l·ªùi kh√°ch
        if (event.message && event.message.text && !isFromBot) {
          await handleMessage(senderId, event.message.text);
        }
      }));
    }));
    res.sendStatus(200);
  } else {
    res.sendStatus(404);
  }
});

// Facebook webhook x√°c minh
app.get('/webhook', (req, res) => {
  const mode = req.query['hub.mode'];
  const token = req.query['hub.verify_token'];
  const challenge = req.query['hub.challenge'];
  if (mode === 'subscribe' && token === VERIFY_TOKEN) res.status(200).send(challenge);
  else res.sendStatus(403);
});

app.listen(PORT, () => console.log(`Bot ƒëang ch·∫°y ·ªü c·ªïng ${PORT}`));
