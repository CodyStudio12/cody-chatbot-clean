diff --git a/index.js b/index.js
index 13ece7ae36d8421c0b3c86ce36b1af7e99582421..29b16b83bb66a66cffdaf921c6e8b67fad153780 100644
--- a/index.js
+++ b/index.js
@@ -1,55 +1,64 @@
 // === C·∫§U H√åNH ===
 require('dotenv').config();
 const express = require('express');
 const axios = require('axios');
 const app = express();
 app.use(express.json());
 
 const PAGE_ACCESS_TOKEN = process.env.PAGE_ACCESS_TOKEN;
 const VERIFY_TOKEN = process.env.VERIFY_TOKEN;
 const PORT = process.env.PORT || 3000;
 
 // === B·ªò NH·ªö T·∫†M ===
 const memory = {}; // L∆∞u info t·ª´ng kh√°ch
 const recentReplies = {}; // ƒê√°nh d·∫•u tin ƒë√£ ƒë∆∞·ª£c admin tr·∫£ l·ªùi
 
 // === PROMPT ƒê·ªäNH H∆Ø·ªöNG ===
 const SYSTEM_PROMPT = `B·∫°n l√† chatbot t∆∞ v·∫•n d·ªãch v·ª• c∆∞·ªõi c·ªßa Cody Studio. Khi n√≥i chuy·ªán v·ªõi kh√°ch, b·∫°n lu√¥n x∆∞ng "Cody" v√† g·ªçi kh√°ch l√† "m√¨nh" ho·∫∑c "em/ch·ªã/anh" m·ªôt c√°ch t·ª± nhi√™n, th√¢n thi·ªán. H√£y gi·ªØ ng√¥n ng·ªØ m·ªÅm m·∫°i, nh·∫π nh√†ng v√† r√µ r√†ng nh∆∞ c√°ch m·ªôt nh√¢n vi√™n t∆∞ v·∫•n d√†y d·∫°n kinh nghi·ªám tr√≤ chuy·ªán v·ªõi c√¥ d√¢u ch√∫ r·ªÉ s·∫Øp c∆∞·ªõi, kh√¥ng t∆∞ v·∫•n nh·ªØng g√¨ m√¨nh kh√¥ng bi·∫øt. ƒê·ª´ng tr·∫£ l·ªùi n·∫øu admin ƒë√£ ph·∫£n h·ªìi.`;
 
 // === H·ªñ TR·ª¢ G·ª¨I TIN NH·∫ÆN ===
 async function sendMessage(recipientId, message, imageUrl = null) {
   const messages = Array.isArray(message) ? message : [message];
-  for (let msg of messages) {
+  for (const msg of messages) {
     const payload = {
       messaging_type: 'RESPONSE',
       recipient: { id: recipientId },
       message: imageUrl
-        ? { attachment: { type: 'image', payload: { url: imageUrl, is_reusable: true } } }
-        : { text: msg },
+        ? {
+            attachment: {
+              type: 'image',
+              payload: { url: imageUrl, is_reusable: true },
+            },
+            metadata: 'from_bot',
+          }
+        : { text: msg, metadata: 'from_bot' },
     };
-    await axios.post(`https://graph.facebook.com/v18.0/me/messages?access_token=${PAGE_ACCESS_TOKEN}`, payload);
+    await axios.post(
+      `https://graph.facebook.com/v18.0/me/messages?access_token=${PAGE_ACCESS_TOKEN}`,
+      payload
+    );
   }
 }
 
 // === PH√ÇN T√çCH N·ªòI DUNG V√Ä TR·∫¢ L·ªúI ===
 async function handleMessage(senderId, messageText) {
   const user = memory[senderId] || { date: null, location: null, type: null, hasSentPackages: false, sessionStarted: false };
   const lower = messageText.toLowerCase();
 
   const OPENING_MESSAGES = [
     "hi", "t∆∞ v·∫•n gi√∫p em", "t∆∞ v·∫•n", "quay gi√° bao nhi√™u", "ch·ª•p gi√° bao nhi√™u",
     "quay ch·ª•p gi√° bao nhi√™u", "em mu·ªën h·ªèi g√≥i quay ch·ª•p", "em mu·ªën t∆∞ v·∫•n c∆∞·ªõi",
     "cho em h·ªèi gi√° quay ch·ª•p"
   ];
 
   // G·∫∑p tin nh·∫Øn m·ªü ƒë·∫ßu
   if (!user.sessionStarted && OPENING_MESSAGES.some(msg => lower.includes(msg))) {
     user.sessionStarted = true;
     memory[senderId] = user;
 
     await sendMessage(senderId, "Hello D√¢u n√® ‚ù§Ô∏è Cody c·∫£m ∆°n v√¨ ƒë√£ nh·∫Øn tin ·∫°~");
     await sendMessage(senderId, "M√¨nh ƒë√£ c√≥ **ng√†y t·ªï ch·ª©c** ch∆∞a nhen?");
     await sendMessage(senderId, "V√† cho Cody xin lu√¥n **ƒë·ªãa ƒëi·ªÉm t·ªï ch·ª©c** nha (SG hay ·ªü t·ªânh n√®...)");
     await sendMessage(senderId, "L·ªÖ c∆∞·ªõi c·ªßa m√¨nh l√† s√°ng l·ªÖ chi·ªÅu ti·ªác hay ti·ªác tr∆∞a ha.");
     return;
   }
diff --git a/index.js b/index.js
index 13ece7ae36d8421c0b3c86ce36b1af7e99582421..29b16b83bb66a66cffdaf921c6e8b67fad153780 100644
--- a/index.js
+++ b/index.js
@@ -61,78 +70,72 @@ async function handleMessage(senderId, messageText) {
 
   memory[senderId] = user;
 
   // N·∫øu ch∆∞a ƒë·ªß info ‚Üí h·ªèi ti·∫øp c√°i thi·∫øu
   const missing = [];
   if (!user.date) missing.push("**h·ªèi ng√†y t·ªï ch·ª©c c∆∞·ªõi** c·ªßa m√¨nh lu√¥n n√®");
   if (!user.location) missing.push("**h·ªèi ƒë·ªãa ƒëi·ªÉm t·ªï ch·ª©c** lu√¥n nha");
   if (!user.type) missing.push("**s√°ng l·ªÖ chi·ªÅu ti·ªác hay ti·ªác tr∆∞a** lu√¥n nha");
 
   if (missing.length > 0) {
     for (const msg of missing) await sendMessage(senderId, `Cho Cody xin ${msg}`);
     return;
   }
 
   // N·∫øu ƒë·ªß info ‚Üí g·ª≠i g√≥i ∆∞u ƒë√£i
   if (!user.hasSentPackages) {
     user.hasSentPackages = true;
     memory[senderId] = user;
 
     await sendMessage(senderId, 'D·∫°, d∆∞·ªõi ƒë√¢y l√† 3 g√≥i ∆∞u ƒë√£i c·ªßa th√°ng b√™n em nhen ‚ù§Ô∏è');
     await sendMessage(senderId, 'üéÅ **Package 1:** 2 m√°y quay + 2 m√°y ch·ª•p, gi√° 16.500.000ƒë\nüëâ https://www.facebook.com/photo1');
     await sendMessage(senderId, 'üéÅ **Package 2:** 1 m√°y quay + 2 m√°y ch·ª•p, gi√° 12.500.000ƒë\nüëâ https://www.facebook.com/photo2');
     await sendMessage(senderId, 'üéÅ **Package 3:** 1 m√°y quay + 1 m√°y ch·ª•p, gi√° 9.500.000ƒë\nüëâ https://www.facebook.com/photo3');
   }
 }
-// Update sendMessage ƒë·ªÉ ƒë√≠nh k√®m metadata "from_bot"
-async function sendMessage(senderId, messageText) {
-  const body = {
-    recipient: { id: senderId },
-    message: {
-      text: messageText,
-      metadata: "from_bot" // üè∑ Flag ƒë·ªÉ ph√¢n bi·ªát tin nh·∫Øn c·ªßa bot
-    }
-  };
-
-  await axios.post(`https://graph.facebook.com/v17.0/me/messages?access_token=${PAGE_ACCESS_TOKEN}`, body);
-}
 
 // === NH·∫¨N WEBHOOK T·ª™ FACEBOOK ===
 app.post('/webhook', async (req, res) => {
   const body = req.body;
   if (body.object === 'page') {
     for (const entry of body.entry) {
       for (const event of entry.messaging) {
-        const isFromBot = event.message?.metadata === "from_bot";
-if (event.message && !event.message.is_echo && !isFromBot) {
+        const senderId = event.sender.id;
+        const isFromBot = event.message?.metadata === 'from_bot';
+
+        // Tin nh·∫Øn do page g·ª≠i nh∆∞ng kh√¥ng ph·∫£i bot
+        if (event.message?.is_echo && !isFromBot) {
+          recentReplies[senderId] = 'admin';
+          continue;
         }
 
         if (recentReplies[senderId] === 'admin') continue;
 
-        if (recentReplies[senderId] && Date.now() - recentReplies[senderId] < 10 * 60 * 1000) continue;
+        if (recentReplies[senderId] && Date.now() - recentReplies[senderId] < 10 * 60 * 1000)
+          continue;
 
-        if (event.message && event.message.text) {
+        if (event.message && event.message.text && !isFromBot) {
           recentReplies[senderId] = Date.now();
           try {
             await handleMessage(senderId, event.message.text);
           } catch (err) {
             await sendMessage(senderId, 'M√¨nh ƒë·ª£i Cody 1 x√≠u nhen');
           }
         }
       }
     }
     res.sendStatus(200);
   } else {
     res.sendStatus(404);
   }
 });
 
 // === X√ÅC MINH WEBHOOK ===
 app.get('/webhook', (req, res) => {
   const mode = req.query['hub.mode'];
   const token = req.query['hub.verify_token'];
   const challenge = req.query['hub.challenge'];
 
   if (mode === 'subscribe' && token === VERIFY_TOKEN) res.status(200).send(challenge);
   else res.sendStatus(403);
 });
 
